const { fetchTradeData } = require('./automated-fetch');
const AWS = require('aws-sdk');
const moment = require('moment');

// Configure AWS SDK to use ap-south-1 region
AWS.config.update({ region: 'ap-south-1' });
const ses = new AWS.SES();

// Email configuration
const EMAIL_CONFIG = {
  fromEmail: 'aniketamrutkar@gmail.com',
  toEmails: ['aniketamrutkar@gmail.com']
};

// Create HTML formatted report
function createHtmlReport(reportData, summary) {
  const { report, date } = reportData;
  
  return `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .header { background-color: #f4f4f4; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
        .section { margin-bottom: 20px; }
        .pre-formatted { background-color: #f8f8f8; padding: 15px; border-radius: 5px; font-family: monospace; white-space: pre-wrap; }
        .buy-section { background-color: #e8f5e8; }
        .sell-section { background-color: #ffe8e8; }
        .summary { background-color: #e8f4fd; padding: 10px; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìà Angel Broking Trade Report</h1>
        <p><strong>Date:</strong> ${date}</p>
        <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
        <p><strong>Accounts:</strong> Mummy (J77302) & Papa (W1573)</p>
    </div>
    
    <div class="summary">
        <h2>üìä Summary</h2>
        <ul>
            <li><strong>Mummy Orders:</strong> ${summary.mummyOrders}</li>
            <li><strong>Papa Orders:</strong> ${summary.papaOrders}</li>
            <li><strong>Status:</strong> ‚úÖ Successfully processed</li>
        </ul>
    </div>
    
    <div class="section">
        <h2>üìã Detailed Report</h2>
        <div class="pre-formatted">${report.replace(/\n/g, '<br>')}</div>
    </div>
    
    <div class="section">
        <p><em>This report was automatically generated by the Angel Broking Trade Automation System running locally with email delivery.</em></p>
    </div>
</body>
</html>`;
}

// Send email with trade report
async function sendEmailReport(subject, textBody, htmlBody) {
  try {
    const params = {
      Source: EMAIL_CONFIG.fromEmail,
      Destination: {
        ToAddresses: EMAIL_CONFIG.toEmails
      },
      Message: {
        Subject: {
          Data: subject,
          Charset: 'UTF-8'
        },
        Body: {
          Text: {
            Data: textBody,
            Charset: 'UTF-8'
          },
          Html: {
            Data: htmlBody,
            Charset: 'UTF-8'
          }
        }
      }
    };

    await ses.sendEmail(params).promise();
    console.log(`üìß Email sent successfully to: ${EMAIL_CONFIG.toEmails.join(', ')}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Failed to send email:`, error.message);
    return false;
  }
}

// Main function that combines local fetch with email delivery
async function fetchAndEmailReport() {
  console.log('üöÄ Starting local automated fetch with email delivery...');
  
  try {
    // Use the existing working local fetch
    const result = await fetchTradeData();
    
    if (!result.success) {
      throw new Error(result.error);
    }
    
    // Read the generated files to get data for email
    const fs = require('fs');
    const _ = require('underscore');
    
    let data_pew, data_jpw;
    try {
      data_pew = JSON.parse(fs.readFileSync('./data/response-pew.json', 'utf-8')).data;
      data_jpw = JSON.parse(fs.readFileSync('./data/response-jpw.json', 'utf-8')).data;
    } catch (error) {
      console.log('‚ö†Ô∏è  Could not read response files, using empty data');
      data_pew = [];
      data_jpw = [];
    }
    
    // Read the generated report
    const date = moment().format('DD-MMM-YYYY');
    const month = moment().format('MMM-YYYY');
    let reportContent = '';
    
    try {
      reportContent = fs.readFileSync(`./bkp/${month}/${date}.txt`, 'utf-8');
    } catch (error) {
      console.log('‚ö†Ô∏è  Could not read report file, using empty report');
      reportContent = 'No trading data available for today.';
    }
    
    // Create email content
    const summary = {
      mummyOrders: data_jpw.length,
      papaOrders: data_pew.length
    };
    
    const reportData = {
      report: reportContent,
      date: date,
      month: month
    };
    
    const emailSubject = `üìà Angel Broking Trade Report - ${date}`;
    const textBody = `Angel Broking Trade Report for ${date}

Summary:
- Mummy Orders: ${summary.mummyOrders}
- Papa Orders: ${summary.papaOrders}

Detailed Report:
${reportContent}

---
Generated automatically by Angel Broking Trade Automation System (Local)
Execution Time: ${new Date().toISOString()}`;
    
    const htmlBody = createHtmlReport(reportData, summary);
    
    // Send email report
    const emailSent = await sendEmailReport(emailSubject, textBody, htmlBody);
    
    if (emailSent) {
      console.log('‚úÖ Complete process finished successfully with email delivery!');
      return { success: true, message: 'Report generated and emailed successfully' };
    } else {
      console.log('‚ö†Ô∏è  Report generated but email delivery failed');
      return { success: false, error: 'Email delivery failed' };
    }
    
  } catch (error) {
    console.error('‚ùå Process failed:', error.message);
    
    // Try to send error notification email
    try {
      const errorSubject = `‚ùå Angel Broking Trade Report Failed - ${moment().format('DD-MMM-YYYY')}`;
      const errorBody = `The Angel Broking trade report automation failed.

Error: ${error.message}
Time: ${new Date().toISOString()}

Please check the system and try running manually.`;
      
      await sendEmailReport(errorSubject, errorBody, `<p><strong>Error:</strong> ${error.message}</p>`);
    } catch (emailError) {
      console.error('‚ùå Could not send error notification email:', emailError.message);
    }
    
    return { success: false, error: error.message };
  }
}

// Export for use as module
module.exports = { fetchAndEmailReport };

// Run immediately if called directly
if (require.main === module) {
  fetchAndEmailReport().then(result => {
    console.log('Final result:', result);
    process.exit(result.success ? 0 : 1);
  });
}
